// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.2

// Built By: go install

package procedure

import (
	"errors"
	"fmt"
)

const (
	// ProcedureTypeQuery is a ProcedureType of type query.
	ProcedureTypeQuery ProcedureType = "query"
	// ProcedureTypeMutation is a ProcedureType of type mutation.
	ProcedureTypeMutation ProcedureType = "mutation"
	// ProcedureTypeLive is a ProcedureType of type live.
	ProcedureTypeLive ProcedureType = "live"
)

var ErrInvalidProcedureType = errors.New("not a valid ProcedureType")

// String implements the Stringer interface.
func (x ProcedureType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ProcedureType) IsValid() bool {
	_, err := ParseProcedureType(string(x))
	return err == nil
}

var _ProcedureTypeValue = map[string]ProcedureType{
	"query":    ProcedureTypeQuery,
	"mutation": ProcedureTypeMutation,
	"live":     ProcedureTypeLive,
}

// ParseProcedureType attempts to convert a string to a ProcedureType.
func ParseProcedureType(name string) (ProcedureType, error) {
	if x, ok := _ProcedureTypeValue[name]; ok {
		return x, nil
	}
	return ProcedureType(""), fmt.Errorf("%s is %w", name, ErrInvalidProcedureType)
}

// MarshalText implements the text marshaller method.
func (x ProcedureType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ProcedureType) UnmarshalText(text []byte) error {
	tmp, err := ParseProcedureType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *ProcedureType) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}
